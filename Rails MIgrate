itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
== 20220519155639 CreateBooks: migrating ======================================
-- create_table(:books)
   -> 0.0106s
== 20220519155639 CreateBooks: migrated (0.0107s) =============================

itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails generate model publisher
      invoke  active_record
      create    db/migrate/20220519155640_create_publishers.rb
      create    app/models/publisher.rb
      invoke    test_unit
      create      test/models/publisher_test.rb
      create      test/fixtures/publishers.yml
  itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
== 20220519155640 CreatePublishers: migrating =================================
-- create_table(:publishers)
   -> 0.0040s
== 20220519155640 CreatePublishers: migrated (0.0040s) ========================

itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails g migration add_address_column_in_publishers_table
      invoke  active_record
      create    db/migrate/20220519155641_add_address_column_in_publishers_table.rb
itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
== 20220519155641 AddAddressColumnInPublishersTable: migrating ================
-- add_column(:publishers, :address, :string)
   -> 0.0012s
   itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
   == 20220519155640 CreatePublishers: migrating =================================
   -- create_table(:publishers)
      -> 0.0040s
   == 20220519155640 CreatePublishers: migrated (0.0040s) ========================
itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails g migration add_address_column_in_publishers_table
         invoke  active_record
         create    db/migrate/20220519155641_add_address_column_in_publishers_table.rb
   itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
   == 20220519155641 AddAddressColumnInPublishersTable: migrating ================
   -- add_column(:publishers, :address, :string)
      -> 0.0012s

To see all tables in db in rails change
3.0.0 :004 > ActiveRecord::Base.connection.tables
 => ["schema_migrations", "ar_internal_metadata", "books", "publishers"] 
 3.0.0 :008 > book.class
 => Book(id: integer, title: text, volume: text, publisher_id: integer, quantity: integer, issued_quantity: integer, type_id: integer, created_at: datetime, updated_at: datetime) 

 3.0.0 :011 > book.save
  TRANSACTION (0.3ms)  BEGIN
  Book Create (1.0ms)  INSERT INTO "books" ("title", "volume", "publisher_id", "quantity", "issued_quantity", "type_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["title", "Something"], ["volume", nil], ["publisher_id", nil], ["quantity", nil], ["issued_quantity", nil], ["type_id", nil], ["created_at", "2022-05-19 14:24:43.926018"], ["updated_at", "2022-05-19 14:24:43.926018"]]
  TRANSACTION (6.9ms)  COMMIT   

  itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
  == 20220519155642 AddingForegnKeyInBooksTableFromPublishersTable: migrating ===
  -- add_foreign_key(:books, :publishers)
     -> 0.0101s
  == 20220519155642 AddingForegnKeyInBooksTableFromPublishersTable: migrated (0.0101s) 

  Table "public.books"
  Column      |              Type              | Collation | Nullable |              Default              
-----------------+--------------------------------+-----------+----------+-----------------------------------
id              | bigint                         |           | not null | nextval('books_id_seq'::regclass)
title           | text                           |           |          | 
volume          | text                           |           |          | 
publisher_id    | integer                        |           |          | 
quantity        | integer                        |           |          | 
issued_quantity | integer                        |           |          | 
type_id         | integer                        |           |          | 
created_at      | timestamp(6) without time zone |           | not null | 
updated_at      | timestamp(6) without time zone |           | not null | 
Indexes:
 "books_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
 "fk_rails_d7ae2b039e" FOREIGN KEY (publisher_id) REFERENCES publishers(id)

 3.0.0 :001 > Publisher.create(name: "India Publishing House")
  TRANSACTION (0.1ms)  BEGIN
  Publisher Create (0.3ms)  INSERT INTO "publishers" ("name", "created_at", "updated_at", "address") VALUES ($1, $2, $3, $4) RETURNING "id"  [["name", "India Publishing House"], ["created_at", "2022-05-20 11:18:44.814652"], ["updated_at", "2022-05-20 11:18:44.814652"], ["address", nil]]    
  TRANSACTION (6.6ms)  COMMIT                                    
 =>                                                              
#<Publisher:0x00007ff5709d9c30                                   
 id: 1,                                                          
 name: "India Publishing House",                                 
 created_at: Fri, 20 May 2022 11:18:44.814652000 UTC +00:00,     
 updated_at: Fri, 20 May 2022 11:18:44.814652000 UTC +00:00,     
 address: nil>  
    
 3.0.0 :010 > publisher1 = Publisher.find(1)
  Publisher Load (0.6ms)  SELECT "publishers".* FROM "publishers" WHERE "publishers"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]                                                 
 =>                                                               
#<Publisher:0x000055c4ca6a7b80  
3.0.0 :012 > publisher1.name
=> "India Publishing House" 
3.0.0 :013 > 

3.0.0 :015 > publisher1
 => 
#<Publisher:0x000055c4ca6a7b80                                    
 id: 1,                                                           
 name: "India Publishing House",                                  
 created_at: Fri, 20 May 2022 11:18:44.814652000 UTC +00:00,      
 updated_at: Fri, 20 May 2022 11:18:44.814652000 UTC +00:00,      
 address: "Delhi">    

 itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails g model book_tpe
      invoke  active_record
      create    db/migrate/20220520112834_create_book_tpes.rb
      create    app/models/book_tpe.rb
      invoke    test_unit
      create      test/models/book_tpe_test.rb
      create      test/fixtures/book_tpes.yml
itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
== 20220520112834 CreateBookTpes: migrating ===================================
-- create_table(:book_tpes)
   -> 0.0051s
== 20220520112834 CreateBookTpes: migrated (0.0052s) ==========================


itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
== 20220520113049 RenamingColumnBookType: migrating ===========================
-- rename_column(:book_tpes, :subtype, :sub_type)
   -> 0.0020s
== 20220520113049 RenamingColumnBookType: migrated (0.0020s) ==================

itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
== 20220520113254 RenamingTableBookType: migrating ============================
-- rename_table("book_tpes", "book_types")
   -> 0.0038s
== 20220520113254 RenamingTableBookType: migrated (0.0038s) ===================

itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
== 20220520113506 AddingForegnKeyInBooksTableFromBookTypeTable: migrating =====
-- add_column(:books, :book_type_id, :integer)
   -> 0.0015s
-- add_foreign_key(:books, :book_types)
   -> 0.0013s
-- remove_column(:books, :type_id)
   -> 0.0046s
== 20220520113506 AddingForegnKeyInBooksTableFromBookTypeTable: migrated (0.0075s) 

Table "public.book_types"
Column   |              Type              | Collation | Nullable |                Default                 
------------+--------------------------------+-----------+----------+----------------------------------------
id         | bigint                         |           | not null | nextval('book_types_id_seq'::regclass)
type       | text                           |           |          | 
sub_type   | text                           |           |          | 
created_at | timestamp(6) without time zone |           | not null | 
updated_at | timestamp(6) without time zone |           | not null | 
Indexes:
 "book_types_pkey" PRIMARY KEY, btree (id)
Referenced by:
 TABLE "books" CONSTRAINT "fk_rails_88bd3fc602" FOREIGN KEY (book_type_id) REFERENCES book_types(id)


Table "public.books"
Column      |              Type              | Collation | Nullable |              Default              
-----------------+--------------------------------+-----------+----------+-----------------------------------
id              | bigint                         |           | not null | nextval('books_id_seq'::regclass)
title           | text                           |           |          | 
volume          | text                           |           |          | 
publisher_id    | integer                        |           |          | 
quantity        | integer                        |           |          | 
issued_quantity | integer                        |           |          | 
created_at      | timestamp(6) without time zone |           | not null | 
updated_at      | timestamp(6) without time zone |           | not null | 
book_type_id    | integer                        |           |          | 
Indexes:
"books_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
"fk_rails_88bd3fc602" FOREIGN KEY (book_type_id) REFERENCES book_types(id)
"fk_rails_d7ae2b039e" FOREIGN KEY (publisher_id) REFERENCES publishers(id)

Using the up/down Methods
You can also use the old style of migration using up and down methods instead of the change method.
 The up method should describe the transformation youd like to make to your schema, 
 and the down method of your migration should revert the transformations done by the up method. 
 In other words, the database schema should be unchanged if you do an up followed by a down. 
  For example, if you create a table in the up method, you should drop it in the down method. 
  It is wise to perform the transformations in precisely the reverse order they were made in the up method.

  itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:migrate
  == 20220520114626 UsingUpDownMethos: migrating ================================
  -- create_table(:distributors)
     -> 0.0077s
  -- execute("      ALTER TABLE distributors\n        ADD CONSTRAINT zipchk\n        CHECK (char_length(zipcode) = 5);\n")
     -> 0.0008s
  -- add_column(:books, :home_page_url, :string)
     -> 0.0008s
  -- rename_column(:books, :title, :books_name)
     -> 0.0014s
  == 20220520114626 UsingUpDownMethos: migrated (0.0109s) =======================
  

  itsacheckmate@itsacheckmate:~/Training/Ruby/Rails/Rails_lms$ rails db:rollback
== 20220520114626 UsingUpDownMethos: reverting ================================
-- rename_column(:books, :books_name, :title)
   -> 0.0017s
-- remove_column(:books, :home_page_url)
   -> 0.0005s
-- execute("      ALTER TABLE distributors\n        DROP CONSTRAINT zipchk\n")
   -> 0.0006s
-- drop_table(:distributors)
   -> 0.0040s
== 20220520114626 UsingUpDownMethos: reverted (0.0069s) =======================

Resetting the Database
The bin/rails db:reset command will drop the database and set it up again. 
This is functionally equivalent to bin/rails db:drop db:setup.

Running in different environments
By default running bin/rails db:migrate will run in the development environment. 
To run migrations against another environment you can specify it using the RAILS_ENV environment variable while running the command. 
to run migrations against the test environment 
$ bin/rails db:migrate RAILS_ENV=test

Reversible 
If for a migration to do something that Active Record doesnt know how to reverse, we use reversible
it can be used like as above up down method 
def change
  reversible do |dir|
    change_table :books do |t|
      dir.up   { t.change :quantity, :integer }
      dir.down { t.change :quantity, :string }
    end
  end
end